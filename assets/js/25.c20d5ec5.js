(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{339:function(t,e,a){"use strict";a.r(e);var s=a(7),r=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_18-示例-react使用echarts所用到的hooks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_18-示例-react使用echarts所用到的hooks"}},[t._v("#")]),t._v(" 18 示例：React使用Echarts所用到的hooks")]),t._v(" "),e("p",[t._v("本篇文章写于 2020年11月13日，距离前面文章已经过去半年，因此本文的讲述风格和示例代码，可能和前面的章节不同。")]),t._v(" "),e("h2",{attrs:{id:"echarts简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#echarts简介"}},[t._v("#")]),t._v(" Echarts简介")]),t._v(" "),e("p",[t._v("Echarts 是百度公司推出的，基于原生 JS 的图表库，免费开源 ，可用于数据可视化项目。")]),t._v(" "),e("p",[t._v("官网地址：https://echarts.apache.org/zh/feature.html")]),t._v(" "),e("h2",{attrs:{id:"echarts基础操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#echarts基础操作"}},[t._v("#")]),t._v(" Echarts基础操作")]),t._v(" "),e("p",[t._v("1、"),e("strong",[t._v("Echarts 是基于原生 JS 的库，而不是 React 组件")]),t._v("，需要将 “图表” 挂载到 DOM")]),t._v(" "),e("p",[t._v("2、echarts.init(xxx-dom) 是创建 “图表” 的入口函数，该函数将创建创建真正的图表实例，并填充到 xxx-dom 中")]),t._v(" "),e("p",[t._v("3、一个图表 对应一个 DOM，N 个图标需要 N 个 DOM")]),t._v(" "),e("p",[t._v("4、图表实例通过 setOption(option) 来设置(更新)数据")]),t._v(" "),e("h2",{attrs:{id:"针对以上echarts特性-对应的-hooks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#针对以上echarts特性-对应的-hooks"}},[t._v("#")]),t._v(" 针对以上Echarts特性，对应的 hooks")]),t._v(" "),e("p",[t._v("1、使用 useRef 来勾住 jsx 中的某个 DOM")]),t._v(" "),e("p",[t._v("2、使用 useEffect( () => {}, [] ) 来勾住 React 第一次挂载，并通过 echarts.init(xxx-dom) 创建出真正的图表")]),t._v(" "),e("p",[t._v("3、使用 useState 来勾住 创建出的真正图表，以便以后做各种更新操作")]),t._v(" "),e("p",[t._v("4、使用 useEffect( () => {}, [xxx-echart,option] ) 来不断监听组件传递过来的数据变化，并更新图表数据")]),t._v(" "),e("blockquote",[e("p",[t._v("补充说明：尽管 NPM 中已经有 echarts-for-react 这个包，已经将 Echarts 封装成可直接使用的 React 组件，但是我并不是建议使用，因为毕竟 Echarts 并不是特别难，没有必要使用别人封装好的。学习本文后，你自己也可以轻松封装自己的 Echarts 组件，灵活方便。")])]),t._v(" "),e("h2",{attrs:{id:"使用-封装-echarts示例代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-封装-echarts示例代码"}},[t._v("#")]),t._v(" 使用(封装)Echarts示例代码")]),t._v(" "),e("blockquote",[e("p",[t._v("细节不过多说，此处只演示 2 个组件源码，使用 TypeScript 编写")]),t._v(" "),e("ol",[e("li",[t._v("子组件为一个图表，图表是什么类型，由 配置数据 option 中 xAxis.type 的值决定")]),t._v(" "),e("li",[t._v("父组件负责调用子组件并传递图表配置数据")])])]),t._v(" "),e("p",[e("strong",[t._v("父组件：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import React from 'react'\nimport { EChartOption } from 'echarts'\nimport Echart from '../../components/echart'\n\nimport './index.scss'\n\nconst option: EChartOption = {\n    xAxis: {\n        type: 'category',\n        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n    },\n    yAxis: {\n        type: 'value'\n    },\n    series: [{\n        data: [820, 932, 901, 934, 1290, 1330, 1320],\n        type: 'line'\n    }]\n}\n\nconst IndexPage: React.FC = () => {\n    return (\n        <Echart option={option} />\n    )\n}\n\nexport default IndexPage\n")])])]),e("p",[e("strong",[t._v("子组件：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import React, { useState, useRef, useEffect } from 'react'\nimport echarts, { EChartOption, ECharts } from 'echarts'\n\nimport './index.scss'\n\ninterface EchartProp {\n    option: EChartOption\n}\n\nconst Echart: React.FC<EchartProp> = ({ option }) => {\n\n    const chartRef = useRef<HTMLDivElement>(null) //用来勾住渲染后的 DOM\n    const [echartsInstance, setEchartsInstance] = useState<ECharts>() //用来勾住生成后的 图表实例对象\n\n    //仅第一次挂载时执行，将 DOM 传递给 echarts，通过 echarts.init() 得到真正的图表 JS 对象\n    useEffect(() => {\n        if (chartRef.current) {\n            setEchartsInstance(echarts.init(chartRef.current))\n        }\n    }, [])\n\n    //监听依赖变化，并根据需要更新图表数据\n    useEffect(() => {\n        echartsInstance?.setOption(option)\n    }, [echartsInstance, option])\n\n    return (\n        <div ref={chartRef} className='echarts' />\n    )\n}\n\nexport default Echart\n")])])]),e("p",[t._v("以上示例中，父组件功能相对简单，负责调用子组件，并将图表配置数据传递给子组件。")]),t._v(" "),e("p",[t._v("真正需要关注的就是 子组件，在子组件中分别用到了 useRef、useState、useEffect 这 3 个 hook，尤其是 useEffect 还被使用了 2 次。")])])}),[],!1,null,null,null);e.default=r.exports}}]);