(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{336:function(e,a,t){"use strict";t.r(a);var s=t(7),u=Object(s.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_15-usedebugvalue基础用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-usedebugvalue基础用法"}},[e._v("#")]),e._v(" 15 useDebugValue基础用法")]),e._v(" "),a("h2",{attrs:{id:"usedebugvalue概念解释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usedebugvalue概念解释"}},[e._v("#")]),e._v(" useDebugValue概念解释")]),e._v(" "),a("p",[e._v("我们第十个要学习的Hook(钩子函数)是useDebugValue，他的作用是“勾住”React开发调试工具中的自定义hook标签，让useDebugValue勾住的自定义hook可以显示额外的信息。")]),e._v(" "),a("h5",{attrs:{id:"react开发调试工具-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react开发调试工具-是什么"}},[e._v("#")]),e._v(" “React开发调试工具”是什么？")]),e._v(" "),a("p",[e._v("答：谷歌浏览器中的一个扩展插件，名字叫“React Developer Tools”，方便我们在谷歌浏览器上进行react项目调试。")]),e._v(" "),a("p",[e._v("如何安装？"),a("br"),e._v("\n答：可在Chrome扩展程序商店搜索并安装。由于国内网络原因，如果你不会科学上网，那么可以通过国内的一些Chrome扩展程序商店网站，下载“React Developer Tools”离线的crx安装文件进行安装。具体办法可以自己百度。")]),e._v(" "),a("p",[e._v("“React开发调试工具”的使用简单说明："),a("br"),e._v("\n如果该扩展程序安装成功，那么会有以下几种情况："),a("br"),e._v("\n1、对于本机开发调试的项目网页，该插件图标会变成橘黄色，且图标中间有一个小虫子，表示可以进行react源码式的调试，当代码出现错误时会精准定位出错的代码位置。")]),e._v(" "),a("p",[e._v("2、对于别人开发的项目网页，该插件图标会变成蓝色，表示该网页由react开发，当代码出现错误时不能精准定位出错的代码位置。"),a("br"),e._v("\n例如阿里云后台、腾讯云后台、百度翻译这些网页都是用react开发，访问这些网页你就会看到 调试工具图光标为蓝色。  这些大厂都用react，所以虽然学习过程中很痛苦，但是是值得的。")]),e._v(" "),a("p",[e._v("3、对于没有使用react的网页，该插件图标会变成灰色。")]),e._v(" "),a("p",[e._v("让我们回到useDebugValue基础学习中。")]),e._v(" "),a("h2",{attrs:{id:"usedebugvalue是来解决什么问题的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usedebugvalue是来解决什么问题的"}},[e._v("#")]),e._v(" useDebugValue是来解决什么问题的？")]),e._v(" "),a("p",[e._v("答：useDebugValue的目的是“在react开发者工具自定义hook标签中显示额外信息”，方便我们“一眼就能找到”对应的自定义hook。")]),e._v(" "),a("p",[e._v("补充说明："),a("br"),e._v("\n1、react官网文档中明确表示，在普通项目开发中不推荐使用useDebugValue，默认的调试输出已经很清晰可用了。"),a("br"),e._v("\n2、除非你的自定义 hook 是作为共享库中的一部分才有价值。这样其他人更容易注意到你自定义的hook状态变化。")]),e._v(" "),a("h5",{attrs:{id:"自定义hook"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义hook"}},[e._v("#")]),e._v(" 自定义hook？")]),e._v(" "),a("p",[e._v("你可能注意到本章中提到了“自定义hook”，没错。像之前学习的useState、useContext等等都是react自带的hook，这些默认的hook是我们项目开发所需要用到的各种钩子函数。")]),e._v(" "),a("p",[e._v("但是实际开发中，我们需要借助这些基础的、默认的、自带的hook函数，通过组合以及添加业务逻辑代码，形成自己的hook函数。")]),e._v(" "),a("p",[e._v("具体如何自定义hook，稍后会单独有一章如何“自定义hook”中详细讲述。")]),e._v(" "),a("h2",{attrs:{id:"usedebugvalue函数源码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usedebugvalue函数源码"}},[e._v("#")]),e._v(" useDebugValue函数源码：")]),e._v(" "),a("p",[e._v("回到useDebugValue的学习中，首先看一下React源码中的"),a("a",{attrs:{href:"https://github.com/facebook/react/blob/master/packages/react/src/ReactHooks.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("ReactHooks.js"),a("OutboundLink")],1),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("//备注：源码采用TypeScript编写，如果不懂TS代码，阅读起来稍显困难\nexport function useDebugValue<T>(\n  value: T,\n  formatterFn: ?(value: T) => mixed,\n): void {\n    if (__DEV__) {\n    const dispatcher = resolveDispatcher();\n    return dispatcher.useDebugValue(value, formatterFn);\n  }\n}\n")])])]),a("p",[e._v("上述代码看不懂没关系，本系列教程只是讲述“如何使用Hook”，并不是“Hook源码分析”。^_^")]),e._v(" "),a("h2",{attrs:{id:"usedebugvalue基本用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usedebugvalue基本用法"}},[e._v("#")]),e._v(" useDebugValue基本用法")]),e._v(" "),a("p",[e._v("useDebugValue(value,formatterFn)函数第1个参数为我们要额外显示的内容变量。第2个参数是可选的，是对第1个参数值的数据化格式函数。")]),e._v(" "),a("p",[e._v("请注意："),a("br"),e._v("\n1、useDebugValue应该在自定义hook中使用，如果直接在组件内使用是无效的，不会报错也不会有任何额外信息展示。"),a("br"),e._v("\n1、一般调试不需要使用useDebugValue，除非你编写的hook是公共库中的一部分，实在是想凸显额外信息，引起别人注意。"),a("br"),e._v("\n2、如果使用useDebugValue，最好设置第2个参数，向react开发调试工具讲清楚如何格式化展示第1个参数。")]),e._v(" "),a("h5",{attrs:{id:"代码形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码形式"}},[e._v("#")]),e._v(" 代码形式：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("useDebugValue(xxx, xxx => xxxxx)\n")])])]),a("h5",{attrs:{id:"拆解说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拆解说明"}},[e._v("#")]),e._v(" 拆解说明：")]),e._v(" "),a("p",[e._v("1、xxx 为我们要重点关注的变量。"),a("br"),e._v("\n2、xxx => xxxxx 是 (xxx) => {return xxxxx} 的简写。表明如何格式化变量xxx。")]),e._v(" "),a("h2",{attrs:{id:"如何在react调试工具中查看usedebugvalue表现形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何在react调试工具中查看usedebugvalue表现形式"}},[e._v("#")]),e._v(" 如何在react调试工具中查看useDebugValue表现形式")]),e._v(" "),a("p",[e._v("前提条件："),a("br"),e._v("\n1、在谷歌浏览器中成功安装了react开发调试工具"),a("br"),e._v("\n2、react项目中使用了自定义hook，且hook中使用了useDebugValue")]),e._v(" "),a("p",[e._v("那么你可以进行一下步骤："),a("br"),e._v("\n1、打开react调试网页，例如http://localhost:3000/"),a("br"),e._v("\n2、打开谷歌浏览器调试面板(快捷键为F12)"),a("br"),e._v("\n3、找到并点击“Components”一栏"),a("br"),e._v("\n4、在右侧窗口中，找到“hooks”，在“hooks”下就能看到自定义hook中useDebugValue自定义显示的信息。")]),e._v(" "),a("p",[e._v("具体还是以下面实际例子来说明。")]),e._v(" "),a("h2",{attrs:{id:"usedebugvalue使用示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usedebugvalue使用示例"}},[e._v("#")]),e._v(" useDebugValue使用示例：")]),e._v(" "),a("p",[e._v("举例：useTime是我们自定义的一个hook函数，那么在这个自定义hook中，可以通过useDebugValue对变量time进行额外信息展示。")]),e._v(" "),a("p",[e._v("代码示例如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("//自定义hook：useTime\nfunction useTime(date){\n  const [time,setTime] = useState(date);\n  useDebugValue(time,time => new Date(time));//请注意这一行代码\n  return [time,setTime];\n}\n\n//组件中使用useTime，伪代码片段\nconst [time,setTime] = useTime(Date.now());//请注意此处使用的是自定义hook：useTime\n")])])]),a("p",[e._v("代码分析："),a("br"),e._v("\n1、我们在自定义hook中，使用了useDebugValue"),a("br"),e._v("\n2、useDebugValue第1个参数是time，向react开发调试工具表明要重点关注的变量是time。"),a("br"),e._v("\n3、第2个参数是对time的一个格式化函数。由于time实际为一个时间戳数字，通过time => new Date(time)将时间戳转化成具体的可读时间字符串，例如此时此刻：Mon May 11 2020 14:27:39 GMT+0800 (中国标准时间)")]),e._v(" "),a("h5",{attrs:{id:"具体表现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#具体表现"}},[e._v("#")]),e._v(" 具体表现")]),e._v(" "),a("p",[e._v("在谷歌浏览器调试面板的“Component”右侧，你会看到：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("hooks  \n  time:Mon May 11 2020 14:27:39 GMT+0800 (中国标准时间)  \n    State:1589178459090  \n")])])]),a("p",[e._v("假设不使用useDebuValue，默认看到的是：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("hooks  \n  time: \n    State:1589178459090  \n")])])]),a("p",[e._v("“Mon May 11 2020 14:27:39 GMT+0800 (中国标准时间)  ”就是useDebugValue额外展示出的信息。")]),e._v(" "),a("p",[e._v("你甚至还可以使用模板字符串，对格式化数据进行修改，比如将原本的第2个参数 time => new Date(time) 修改为：time => `看这里 ${new Date(time)}`")]),e._v(" "),a("p",[e._v("在谷歌浏览器调试面板的“Component”右侧，你会看到：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("hooks  \n  time:看这里 Mon May 11 2020 14:27:39 GMT+0800 (中国标准时间)  \n    State:1589178459090  \n")])])]),a("h5",{attrs:{id:"再次强调-对于一般性的项目开发-是不需要使用usedebugvalue来额外标记某些变量的-默认的调试输出足够我们使用了。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#再次强调-对于一般性的项目开发-是不需要使用usedebugvalue来额外标记某些变量的-默认的调试输出足够我们使用了。"}},[e._v("#")]),e._v(" 再次强调，对于一般性的项目开发，是不需要使用useDebugValue来额外标记某些变量的，默认的调试输出足够我们使用了。")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("至此，关于useDebugValue基础用法已经讲完，没有高级用法，直接进入下一个Hook。")]),e._v(" "),a("p",[e._v("不！基于react 16.13版本的全部 hook，终于讲完了，没有下一个hook了。")]),e._v(" "),a("p",[e._v("能坚持到现在，真的不容易，默认自带的 react hook 学完后，还需要学习如何自定义hook..."),a("br"),e._v("\n扶我起来，再坚持一下。")])])}),[],!1,null,null,null);a.default=u.exports}}]);