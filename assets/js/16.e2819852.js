(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{330:function(t,s,a){"use strict";a.r(s);var n=a(7),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_09-usereducer高级用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_09-usereducer高级用法"}},[t._v("#")]),t._v(" 09 useReducer高级用法")]),t._v(" "),s("p",[t._v("所谓高级用法，只不过是一些深层知识点和实用技巧，你甚至可以把本章当做对前面知识点的一个巩固和学习。")]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"使用usereducer来管理复杂类型的数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用usereducer来管理复杂类型的数据"}},[t._v("#")]),t._v(" 使用useReducer来管理复杂类型的数据")]),t._v(" "),s("p",[t._v("举例，若某组件内通过ajax请求数据，获取最新一条站内短信文字，需要组件显示整个ajax过程及结果："),s("br"),t._v("\n1、当ajax开始请求时，界面显示“loading...”；"),s("br"),t._v("\n2、当ajax请求发生错误时，界面显示“wrong!”;"),s("br"),t._v("\n3、当ajax请求成功获取数据时，界面显示获取到的数据内容；")]),t._v(" "),s("p",[t._v("如果我们使用useState来实现上述功能，伪代码如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("function Component() {\n  const [loading,setLoading] = useState(true); //是否ajax请求中，默认为true\n  const [result,setResult] = useState(''); //请求数据内容，默认为''\n  const [error,setError] = useState(false); //请求是否发生错误，默认为false\n\n  {\n      //ajax请求成功\n      setLoading(false);\n      setResult('You have a good news!');//请注意，这是一行伪代码，只是为了演示，并不是真正ajax获取的结果\n      setError(false);\n\n      //ajax请求错误\n      setLoading(false);\n      setError(true);\n  }\n\n  return <div>\n    {loading ? 'loading...' : result}\n    {error ? 'wrong!' : null}\n  </div>\n}\n")])])]),s("p",[t._v("如果我们使用useReducer来实现，则可将上述3个变量都放在我们定义的变量state中，伪代码如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("const initralData = {loading: true,result: '',error: false};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'succes':\n        return {loading:false,result:action.res,error:false}\n    case 'error':\n        return {loading:false,error:true}\n  }\n}\n\nfunction Component() {\n  const [state, dispatch] = useReducer(reducer, initralData);\n\n  {\n      //ajax请求成功\n      dispatch({type:'succes',res:'You have a good news!'});\n\n      //ajax请求错误\n      dispatch({type:'error'});\n  }\n\n  return <div>\n    {state.loading ? 'loading...' : state.result}\n    {state.error ? 'wrong!' : null}\n  </div>\n}\n")])])]),s("p",[t._v("你可能会有疑问？"),s("br"),t._v("\n1、为什么看上去使用useReducer后代码变得更多？"),s("br"),t._v("\n答：因为使用useReducer，我们将修改数据拆分为2个部分，即“抛出修改事件和事件修改处理函数”。虽然代码增多了，但是逻辑更加清晰。")]),t._v(" "),s("p",[t._v("2、为什么不使用useState，同时把它对应的变量也做成一个obj，就像useReducer的initralData那种？"),s("br"),t._v("\n答：单纯从1次ajax请求很难看出使用useState或useReducer的差异，但是试想一下多次且ajax返回值在结构类型上容易发生变更，那么使用useReducer这种更加利于代码阅读、功能扩展。")]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"使用usecontext和usereducer实现操作全局共享数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用usecontext和usereducer实现操作全局共享数据"}},[t._v("#")]),t._v(" 使用useContext和useReducer实现操作全局共享数据")]),t._v(" "),s("p",[t._v("试想一下，如果想实现以下组件需求："),s("br"),t._v("\n1、父组件中定义某变量xx；"),s("br"),t._v("\n2、任何层级下的子组件都可以轻松获取变量xx、并且可以“修改”变量xx；")]),t._v(" "),s("p",[t._v("注意这里的修改是加引号的，因为事实上你永远无法以直接赋值的方式进行修改，永远都需要调用父级组件提供的方法来修改。")]),t._v(" "),s("h4",{attrs:{id:"需求分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#需求分析"}},[t._v("#")]),t._v(" 需求分析")]),t._v(" "),s("p",[t._v("首先这个功能是类组件无法做到的，也是React 16.8版本以前根本不能实现的，今天，当你使用Hook可轻松实现类似 Redux 共享数据管理功能。")]),t._v(" "),s("h4",{attrs:{id:"实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),s("p",[t._v("用 useContext 实现“获取全局数据”"),s("br"),t._v("\n用 useReducer 实现“修改全局数据”")]),t._v(" "),s("h4",{attrs:{id:"实现思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现思路"}},[t._v("#")]),t._v(" 实现思路")]),t._v(" "),s("p",[t._v("1、用React.createContext()定义一个全局数据对象；"),s("br"),t._v("\n2、在父组件中用 useReducer 定义全局变量xx和负责抛出修改事件的dispatch；"),s("br"),t._v("\n3、在父组件之外，定义负责具体修改全局变量的处理函数reducer，根据修改xx事件类型和参数，执行修改xx的值；"),s("br"),t._v("\n4、在父组件中用 <XxxContext.Provider value="+t._s(t.xx,t.dispatch)+"> 标签把 全局共享数据和负责抛出修改xx的dispatch 暴露给子组件；"),s("br"),t._v("\n5、在子组件中用 useContext 获取全局变量；"),s("br"),t._v("\n6、在子组件中用 xxContext.dispatch 去抛出修改xx的事件，携带修改事件类型和参数；")]),t._v(" "),s("h4",{attrs:{id:"补充说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#补充说明"}},[t._v("#")]),t._v(" 补充说明")]),t._v(" "),s("p",[t._v('上面一直提到了 “抛出事件” “事件处理函数” "dispatch" 都是字面上的，不是真正意义上的事件驱动。  这些都只是 React 暴露给我们的函数或形参。 真正的事件驱动是由 React Hook 底层为我们完成的。')]),t._v(" "),s("p",[t._v("以上观点仅为个人理解，不能保证100%正确。")]),t._v(" "),s("h4",{attrs:{id:"伪代码演示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#伪代码演示"}},[t._v("#")]),t._v(" 伪代码演示")]),t._v(" "),s("p",[t._v("假设React组件需求为："),s("br"),t._v("\n1、有全局数据变量count；"),s("br"),t._v("\n2、不同层级的子组件均可获取并修改全局变量count；")]),t._v(" "),s("p",[t._v("共享对象 代码如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("import React from 'react';\nconst CountContext = React.createContext();\nexport default CountContext;\n")])])]),s("p",[t._v("父组件 代码如下：")]),t._v(" "),s("div",{staticClass:"language-jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-jsx"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" React"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" useReducer "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" CountContext "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./CountContext'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" ComponentA "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./ComponentA'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" ComponentB "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./ComponentB'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" ComponentC "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./ComponentC'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" initialCount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//定义count的默认值")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//修改count事件处理函数，根据修改参数进行处理")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reducer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" action")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//注意这里先判断事件类型，然后结合携带的参数param 来最终修改count")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'add'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("param"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sub'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("param"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mul'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("param"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'reset'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" initialCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'what?'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ParentComponent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//定义全局变量count，以及负责抛出修改事件的dispatch")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dispatch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useReducer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reducer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" initialCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//请注意：value={{count,dispatch} 是整个代码的核心，把将count、dispatch暴露给所有子组件")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CountContext.Provider")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token script language-javascript"}},[s("span",{pre:!0,attrs:{class:"token script-punctuation punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("dispatch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n        ")]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n            ParentComponent - count=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n            ")]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ComponentA")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),s("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n            ")]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ComponentB")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),s("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n            ")]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ComponentC")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),s("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n        ")]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n      ")]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CountContext.Provider")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" ParentComponent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("子组件A 代码如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("import React,{ useState, useContext } from 'react';\nimport CountContext from './CountContext';\n\nfunction CopmpoentA() {\n  const [param,setParam] = useState(1);\n  //引入全局共享对象，获取全局变量count，以及修改count对应的dispatch\n  const countContext = useContext(CountContext);\n\n  const inputChangeHandler = (eve) => {\n    setParam(eve.target.value);\n  }\n\n  const doHandler = () => {\n    //若想修改全局count，先获取count对应的修改抛出事件对象dispatch，然后通过dispatch将修改内容抛出\n    //抛出的修改内容为：{type:'add',param:xxx}，即告诉count的修改事件处理函数，本次修改的类型为add，参数是param\n    //这里的add和param完全是根据自己实际需求自己定义的\n    countContext.dispatch({type:'add',param:Number(param)});\n  }\n\n  const resetHandler = () => {\n    countContext.dispatch({type:'reset'});\n  }\n\n  return <div>\n        ComponentA - count={countContext.count}\n        <input type='number' value={param} onChange={inputChangeHandler} />\n        <button onClick={doHandler}>add {param}</button>\n        <button onClick={resetHandler}>reset</button>\n    </div>\n}\n\nexport default CopmpoentA;\n")])])]),s("p",[t._v("总结："),s("br"),t._v("\n1、3个子组件他们主要区别是组件内 doHandler 函数，对count进行不同形式的修改；"),s("br"),t._v("\n2、3个子组件分别可以实现对全局变量 count 的获取与修改；"),s("br"),t._v("\n3、当任何一个子组件对count进行了修改，都会立即反映在其他子组件中，实现子组件之间的数据共享。")]),t._v(" "),s("p",[t._v("至此，实现了比较简单的，类似 Redux 全局数据管理效果。")]),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"为什么不使用redux"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么不使用redux"}},[t._v("#")]),t._v(" 为什么不使用Redux？")]),t._v(" "),s("p",[t._v("这个问题以前提出过，现在可以明确回答：因为我自己使用 useReducer + useContext 自己可以轻松实现，干嘛还要用Redux。"),s("br"),t._v("\n再见 Redux。")]),t._v(" "),s("br"),t._v(" "),s("br"),t._v(" "),s("blockquote",[s("p",[t._v("以下内容更新于 2021.05.18")])]),t._v(" "),s("h2",{attrs:{id:"忘掉-redux-忘掉-usereducer-usecontext-拥抱-recoil-吧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#忘掉-redux-忘掉-usereducer-usecontext-拥抱-recoil-吧"}},[t._v("#")]),t._v(" 忘掉 Redux，忘掉 useReducer+useContext，拥抱 Recoil 吧！")]),t._v(" "),s("p",[t._v("强烈推荐使用 React 开发人员针对 Hooks 函数组件推出的新一代状态管理库：Recoil")]),t._v(" "),s("p",[t._v("Recoil 官方网站：https://recoiljs.org/")]),t._v(" "),s("p",[t._v("我写的 Recoil 教程：https://github.com/puxiao/recoil-tutorial")]),t._v(" "),s("blockquote",[s("p",[t._v("以上内容更新于 2021.05.18")])]),t._v(" "),s("br"),t._v(" "),s("br"),t._v(" "),s("h2",{attrs:{id:"什么时候用usestate-什么时候用usereducer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么时候用usestate-什么时候用usereducer"}},[t._v("#")]),t._v(" 什么时候用useState？什么时候用useReducer？")]),t._v(" "),s("p",[t._v("本人的建议是：组件自己内部的简单逻辑变量用useState、多个组件之间共享的复杂逻辑变量用useReducer。")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("至此，关于useReducer高级用法已经讲完，useReducer可以让我们实现复杂逻辑的数据修改，结合useContext更能做到全局数据共享和修改。")]),t._v(" "),s("p",[t._v("目前已经学习过的4个Hook函数useState、useEffect、useContext、useReducer，他们都是用来实现组件某些具体业务功能的，而接下来要学习的Hook函数则是用来提高组件整体性能的，例如第5个Hook函数useCallback和第6个Hook函数useMemo。")])])}),[],!1,null,null,null);s.default=e.exports}}]);